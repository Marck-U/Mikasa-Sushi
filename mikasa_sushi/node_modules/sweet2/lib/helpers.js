'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.embedFile = exports.fingerprint = undefined;
exports.option = option;
exports.pageLang = pageLang;
exports.__ = __;
exports.absolutizeUrl = absolutizeUrl;
exports.absolutizeLinks = absolutizeLinks;
exports.isHome = isHome;
exports.dateToString = dateToString;
exports.assetFilepath = assetFilepath;
exports.rt = rt;
exports.rtt = rtt;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _richtypo = require('richtypo');

var _richtypo2 = _interopRequireDefault(_richtypo);

var _intlMessageformat = require('intl-messageformat');

var _intlMessageformat2 = _interopRequireDefault(_intlMessageformat);

var _intl = require('intl');

var _intlFormatCache = require('intl-format-cache');

var _intlFormatCache2 = _interopRequireDefault(_intlFormatCache);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _util = require('./util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Context (this):
 * {
 *   config: {base: {}, en: {}, ru: {}},
 *   sourcePath: 'en/mypost.md',
 *   url: 'en/mypost',
 *   content: '...html...',
 *   title: 'My post',
 *   ...frontmatter fields...
 * }
 */

/* eslint no-invalid-this:0 */

var getMessageFormat = (0, _intlFormatCache2.default)(_intlMessageformat2.default);
var getDateTimeFormat = (0, _intlFormatCache2.default)(_intl.DateTimeFormat);

/**
 * Localized config option.
 *
 * @param {string} key Config key: bla.bla.
 * @return {string}
 */
function option(key) {
  var lang = this.lang || 'base';
  var value = _lodash2.default.get(this.config[lang], key);
  if (value === undefined) {
    throw new Error('Config option "' + lang + '/' + key + '" not found.');
  }
  return value;
}

/**
 * Page language (`lang` frontmatter field) or default language (`lang` config option) if page language is not specified.
 *
 * @return {string}
 */
function pageLang() {
  return this.lang || this.option('lang');
}

/**
 * Localized config option with {} templates.
 *
 * @param {string} key Key in config.
 * @param {object} params Substitutions.
 * @return {string}
 */
function __(key) {
  var params = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  var string = this.option(key);
  var message = getMessageFormat(string, this.pageLang());
  return message.format(params);
}

/**
 * Absolutize URL.
 *
 * @param {string} url URL.
 * @return {string}
 */
function absolutizeUrl(url) {
  var siteUrl = this.option('url');
  siteUrl = siteUrl.replace(/\/$/, '');
  url = url.replace(/^\//, '');
  return siteUrl + '/' + url;
}

/**
 * Absolutize all links and image URLs.
 *
 * @param {string} html
 * @return {string}
 */
function absolutizeLinks(html) {
  var url = this.option('url');
  return html && html.replace(/href="\//g, 'href="' + url + '/').replace(/src="\//g, 'src="' + url + '/');
}

/**
 * Is current page home page?
 *
 * @return {boolean}
 */
function isHome() {
  return this.url === '/';
}

/**
 * Converts date to string.
 *
 * @param {Date} date
 * @return {string}
 */
function dateToString(date) {
  var format = getDateTimeFormat(this.pageLang(), {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
  return format.format(date);
}

/**
 * Path for a static file.
 *
 * @param {string} url
 * @return {string}
 */
function assetFilepath(url) {
  return _path2.default.join(this.option('assetsFolder'), url);
}

/**
 * Fingerprinted URL for a static file.
 *
 * @param {string} url
 * @return {string}
 */
var fingerprint = exports.fingerprint = _lodash2.default.memoize(function (url) {
  var datetime = _fs2.default.statSync(this.assetFilepath(url)).mtime.getTime();
  return url + '?' + datetime;
});

/**
 * Return a static file content
 *
 * @param {string} url
 * @return {string}
 */
var embedFile = exports.embedFile = _lodash2.default.memoize(function (url) {
  return (0, _util.readFile)(this.assetFilepath(url));
});

/**
 * Rich typo for body text.
 *
 * @param {string} string
 * @return {string}
 */
function rt(string) {
  return string && _richtypo2.default.rich(string, this.pageLang());
}

/**
 * Rich typo for titles.
 *
 * @param {string} string
 * @return {string}
 */
function rtt(string) {
  return string && _richtypo2.default.title(string, this.pageLang());
}