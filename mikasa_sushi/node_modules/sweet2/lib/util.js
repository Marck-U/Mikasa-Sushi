'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.removeExtension = removeExtension;
exports.getExtension = getExtension;
exports.readFile = readFile;
exports.writeFile = writeFile;
exports.readYamlFile = readYamlFile;
exports.formatFieldsForSortByOrder = formatFieldsForSortByOrder;
exports.meta = meta;
exports.og = og;
exports.getFirstParagraph = getFirstParagraph;
exports.getFirstImage = getFirstImage;
exports.cleanHtml = cleanHtml;
exports.start = start;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _mkdirp = require('mkdirp');

var _mkdirp2 = _interopRequireDefault(_mkdirp);

var _jsYaml = require('js-yaml');

var _jsYaml2 = _interopRequireDefault(_jsYaml);

var _strip = require('strip');

var _strip2 = _interopRequireDefault(_strip);

var _escapeHtml = require('escape-html');

var _escapeHtml2 = _interopRequireDefault(_escapeHtml);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Remove extension from file name.
 *
 * @param {string} filename
 * @return {string}
 */
function removeExtension(filename) {
  return filename.replace(/\.\w+$/, '');
}

/**
 * Returns extension of a file (without the leading dot).
 *
 * @param {string} filename
 * @return {string}
 */
function getExtension(filename) {
  return _path2.default.extname(filename).substring(1);
}

/**
 * Read text file.
 *
 * @param {string} filepath
 * @return {string}
 */
function readFile(filepath) {
  return _fs2.default.readFileSync(filepath, { encoding: 'utf8' });
}

/**
 * Save text to a file (create all folders if necessary).
 *
 * @param {string} filepath
 * @param {string} content
 * @return {string}
 */
function writeFile(filepath, content) {
  _mkdirp2.default.sync(_path2.default.dirname(filepath));
  return _fs2.default.writeFileSync(filepath, content, { encoding: 'utf8' });
}

/**
 * Read YAML file.
 *
 * @param {string} filepath
 * @return {string}
 */
function readYamlFile(filepath) {
  try {
    return _jsYaml2.default.safeLoad(readFile(filepath));
  } catch (e) {
    console.log('Cannot read YAML file ' + filepath + ':', e);
  }
}

/**
 * Prepare fields list in short format to _.sortByOrder()
 * @param {Array} shortFields ['foo', '-bar']
 * @return {Array}
 */
function formatFieldsForSortByOrder(shortFields) {
  return _lodash2.default.unzip(shortFields.map(function (field) {
    if (field[0] === '-') {
      return [field.substr(1), 'desc'];
    } else {
      return [field, 'asc'];
    }
  }));
}

/**
 * Returns HTML meta tag.
 *
 * @param {string} name Meta name.
 * @param {string} content Meta value.
 * @return {string}
 */
function meta(name, content) {
  content = cleanHtml(content);
  return '<meta name="' + name + '" content="' + content + '">';
}

/**
 * Returns HTML meta tag for Open Graph.
 *
 * @param {string} name Meta name.
 * @param {string} content Meta value.
 * @return {string}
 */
function og(name, content) {
  content = cleanHtml(content);
  return '<meta property="' + name + '" content="' + content + '">';
}

/**
 * Return the content of the first paragraph in a given HTML.
 *
 * @param {string} text
 * @return {string}
 */
function getFirstParagraph(text) {
  var m = text.match(/<p[^>]*>(.*?)<\/p>/i);
  return m && m[1];
}

/**
 * Return the URL of the first image in a given HTML.
 *
 * @param {string} text
 * @return {string}
 */
function getFirstImage(text) {
  var m = text.match(/<img\s+src=["']([^"']+)["']/i);
  return m && m[1];
}

/**
 * Remove HTML and escape special characters.
 *
 * @param {string} text
 * @return {string}
 */
function cleanHtml(text) {
  return (0, _escapeHtml2.default)((0, _strip2.default)(text));
}

/**
 * Print message immidiately and show execution time on process exit.
 *
 * @param {string} message
 */
function start(message) {
  console.log(message);
  var startTime = new Date().getTime();

  process.on('exit', function () {
    var time = new Date().getTime() - startTime;
    var minutes = Math.floor(time / 1000 / 60) % 60;
    var seconds = Math.floor(time / 1000) % 60;
    console.log('Done in', (minutes ? minutes + 'm ' : '') + (seconds ? seconds + 's' : '') + (!minutes && !seconds ? 'a moment' : ''));
  });
}