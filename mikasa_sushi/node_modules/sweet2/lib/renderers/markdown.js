'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.MarkdownRenderer = undefined;
exports.default = createMarkdownRenderer;

var _marked = require('marked');

var _marked2 = _interopRequireDefault(_marked);

var _highlight = require('highlight.js');

var _highlight2 = _interopRequireDefault(_highlight);

var _parse = require('parse5');

var _parse2 = _interopRequireDefault(_parse);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MarkdownRenderer = (function (_marked$Renderer) {
	_inherits(MarkdownRenderer, _marked$Renderer);

	function MarkdownRenderer() {
		_classCallCheck(this, MarkdownRenderer);

		return _possibleConstructorReturn(this, Object.getPrototypeOf(MarkdownRenderer).apply(this, arguments));
	}

	_createClass(MarkdownRenderer, [{
		key: 'heading',

		// Do not put IDs in headers
		value: function heading(text, level) {
			var tag = 'h' + level;
			return '<' + tag + '>' + text + '</' + tag + '>\n';
		}

		// Custom tags

	}, {
		key: 'html',
		value: function html(_html) {
			if (_html.startsWith('<x-')) {
				// Parse tagâ€™s HTML
				var dom = _parse2.default.parseFragment(_html);
				var node = dom.childNodes[0];
				var tagName = node.tagName;
				var attrs = node.attrs;

				tagName = tagName.replace(/^x-/, '');

				// Check tag function
				var tagFunction = this.options.customTags[tagName];
				if (!tagFunction || !_lodash2.default.isFunction(tagFunction)) {
					throw new Error('Custom tag "' + tagName + '" is not defined or is not a function.');
				}

				// Unzip attributes
				attrs = attrs.reduce(function (attrsObj, attr) {
					attrsObj[attr.name] = attr.value;
					return attrsObj;
				}, {});

				// Render
				return tagFunction(attrs);
			}
			return _html;
		}
	}]);

	return MarkdownRenderer;
})(_marked2.default.Renderer);

exports.MarkdownRenderer = MarkdownRenderer;

var defaultOptions = {
	renderer: MarkdownRenderer,
	hljs: {
		tabReplace: null,
		aliases: {
			yaml: 'python',
			shell: 'bash'
		}
	},
	customTags: {}
};

/**
 * Returns function that renders Markdown using Marked.
 *
 * @param {object} options
 * @return {Function}
 */
function createMarkdownRenderer() {
	var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	options = _lodash2.default.merge({}, defaultOptions, options);

	// HACK: global Highlight.js options
	_highlight2.default.configure(options.hljs);

	var markedOptions = {
		renderer: new options.renderer(),
		customTags: options.customTags,
		highlight: function highlight(code, lang) {
			if (lang) {
				return _highlight2.default.highlight(options.hljs.aliases[lang] || lang, code).value;
			} else {
				return _highlight2.default.highlightAuto(code).value;
			}
		}
	};

	return function render(source) {
		return (0, _marked2.default)(source, markedOptions);
	};
}